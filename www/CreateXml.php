<?php/** * Класс для создания xml-файла * Формируются только те теги, алиасы которых есть в SELECT. * Алиасы в SELECT'е должны соответстовать на основе требований xml-файла: http://autoload.avito.ru/format/realty/ * * Class CreateXml */class CreateXml{    static protected $mode = 'dev'/*prod*/; // Режим работы: dev - отладка, вывод на экран // prod - вывод в файл    /**     * Проверяет есть ли данные для тега. Если есть, то печатает тег с данными. Пустой тег не выводится     *     * @param $child    <p>$ad</p>     * @param $nameTag  <p>Название формируемого тега</p>     * @param $data     <p>Данные, текст</p>     */    protected static function printTag($child, $nameTag, $data)    {        if (!empty($data)) {            $child->addChild($nameTag, $data);        }    }    /**     * Формируем тег Images.     * Данную функцию использовать, когда Images и Image уже хранятся в нужном формате     *     * @param $child            <p>$ad</p>     * @param $nameTagImages    <p>Название формируемого тега</p>     * @param $dataPhotos       <p>Данные (<images><image ...> ...</image></images>)</p>     */    protected static function printTagImages($child, $nameTagImages = 'Images', $dataPhotos)    {        if (!empty($dataPhotos)) {            /**             * Создаем новый элемент XML-документа             * P.S.: это необходимо, потому что в поле Photos хранятся данные в виде тегов,             * котроые нужно перебрать и склеить с основным XML-документом             */            $ImagesXML = new SimpleXMLElement($dataPhotos);            // создаем ветку Images            $Images = $child->addChild($nameTagImages);            // перебираем элементы по ImagesXML            foreach ($ImagesXML as $imageItem) {                // создаем тег Image и наполняем данными. Обязательно убираем спец символы!!!                $Image = $Images->addChild('Image', htmlspecialchars($imageItem));                // устанавливаем атрибуты для тега Image                $Image->addAttribute('storetype', $imageItem['storetype']);                $Image->addAttribute('id', $imageItem['id']);                $Image->addAttribute('state', $imageItem['state']);            }        }    }    /**     * Формируем тег Images.     * Данную функцию использовать, когда есть отдельная табилца для Image, поля которой хранят атрибуты тега Image и его контент (url фотографии)     *     * @param $Ad            <p>$ad</p>     * @param $dataImages    <p>Объект с записями из табилцы Image</p>     * @param $obj_id        <p>Номер объекта, к которому принадлежат фотографии</p>     */    protected static function printTagImages_ver2($Ad, $dataImages, $obj_id)    {        // создаем ветку Images        $Images = $Ad->addChild('Images');        foreach ($dataImages as $imageItem) {            // ищем запись для нужного id объекта            if ($imageItem->id == $obj_id) {                // создаем тег Image и наполняем данными                $Image = $Images->addChild('Image', $imageItem->image);                // устанавливаем атрибуты для тега Image                $Image->addAttribute('storetype', $imageItem->storetype);                $Image->addAttribute('id', $imageItem->id);                $Image->addAttribute('state', $imageItem->state);            }        }    }    /**     * Заполнение данными и создание XML-файла     *     * @param $dataAds      <p>Объект с основными данными</p>     * @param $nameFileXml  <p>Имя xml-файла</p>     * @param $dataImages   <p>Объект с изображениями</p> НЕОБЯЗАТЕЛЬНЫЙ     */    public static function actionCreate($dataAds, $nameFileXml, $dataImages = null)    {        if (isset($dataAds)) {            // кодировка для xml-файла            $header = '<?xml version=\'1.0\' encoding=\'UTF-8\'?>';            // Создаем основной элемент XML-документа с тегом <?xml ...> и <Ads></Ads>            $AdsXML = new SimpleXMLElement($header . '<Ads></Ads>');            //  Устанавливаем атрибуты для тега <Ads>            $AdsXML->addAttribute('formatVersion', '3');            $AdsXML->addAttribute('target', 'Avito.ru');            // формируем теги из данных            foreach ($dataAds as $item) {                // созадем ветку Ad                $Ad = $AdsXML->addChild('Ad');                // Общие элементы                static::printTag($Ad, 'Id', $item->Id); // *                static::printTag($Ad, 'DateBegin', $item->DateBegin);                static::printTag($Ad, 'DateEnd', $item->DateEnd);                // Контактная информация                static::printTag($Ad, 'AllowEmail', $item->AllowEmail);                static::printTag($Ad, 'ManagerName', $item->ManagerName);                static::printTag($Ad, 'ContactPhone', $item->ContactPhone);                // Местоположение                static::printTag($Ad, 'Region', $item->Region);                static::printTag($Ad, 'City', $item->City);                static::printTag($Ad, 'Subway', $item->Subway);                static::printTag($Ad, 'District', $item->District);                static::printTag($Ad, 'Street', $item->Street);                static::printTag($Ad, 'Latitude', $item->Latitude);                static::printTag($Ad, 'Longitude', $item->Longitude);                static::printTag($Ad, 'DistanceToCity', $item->DistanceToCity);                static::printTag($Ad, 'DirectionRoad', $item->DirectionRoad);                // Описание                static::printTag($Ad, 'Description', $item->Description); // *                // Параметры недвижимости                static::printTag($Ad, 'Category', $item->Category);                static::printTag($Ad, 'OperationType', $item->OperationType);                static::printTag($Ad, 'Country', $item->Country);                static::printTag($Ad, 'Title', $item->Title);                static::printTag($Ad, 'Price', $item->Price);                static::printTag($Ad, 'PriceType', $item->PriceType);                static::printTag($Ad, 'Rooms', $item->Rooms);                static::printTag($Ad, 'Square', $item->Square);                static::printTag($Ad, 'KitchenSpace', $item->KitchenSpace);                static::printTag($Ad, 'LivingSpace', $item->LivingSpace);                static::printTag($Ad, 'LandArea', $item->LandArea);                static::printTag($Ad, 'Floor', $item->Floor);                static::printTag($Ad, 'Floors', $item->Floors);                static::printTag($Ad, 'HouseType', $item->HouseType);                static::printTag($Ad, 'WallsType', $item->WallsType);                static::printTag($Ad, 'MarketType', $item->MarketType);                static::printTag($Ad, 'NewDevelopmentId', $item->NewDevelopmentId);                static::printTag($Ad, 'PropertyRights', $item->PropertyRights);                static::printTag($Ad, 'ObjectType', $item->ObjectType);                static::printTag($Ad, 'ObjectSubtype', $item->ObjectSubtype);                static::printTag($Ad, 'Secured', $item->Secured);                static::printTag($Ad, 'BuildingClass', $item->BuildingClass);                static::printTag($Ad, 'CadastralNumber', $item->CadastralNumber);                static::printTag($Ad, 'VideoURL', $item->VideoURL);                static::printTag($Ad, 'CompanyName', $item->CompanyName);                // Формирование тега Images одним из 2-х способов                if (isset($dataImages)) {                    // Если есть массив с записями Image:                    static::printTagImages_ver2($Ad, $dataImages, $item->Id);                } else {                    // Если Image хранятся в поле таблицы в нужном формате XML:                    static::printTagImages($Ad, 'Images', $item->Photos);                }            }            // тип данных в файле            Header('Content-type: text/xml');            // Вывод результатов: на экран или в файл            if (static::$mode == 'dev') {                // в режиме отладки dev - выводим на экран                echo $AdsXML->asXML();            } elseif (static::$mode == 'prod') {                // в режиме prod - формируем xml файл                $AdsXML->asXML($nameFileXml);            }        }    }} 